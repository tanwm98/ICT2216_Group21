
name: 🧪 Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 'lts/*'

jobs:

  jest-tests:
    name: 🧪 Jest Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run Jest unit tests
        run: |
          npm run test:coverage
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          fail_ci_if_error: false

  integration-tests:
    name: 🎭 Integration Tests (Docker + Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: jest-tests
    environment: staging  # Use your staging environment

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 📝 Update Playwright config for localhost
        run: |
          # Create test-specific Playwright config
          cat > playwright.config.test.js << EOF
          import { defineConfig, devices } from '@playwright/test';

          export default defineConfig({
            testDir: './tests/integration',
            fullyParallel: false,
            forbidOnly: true,
            retries: 2,
            workers: 1,
            reporter: [
              ['html', { outputDir: 'playwright-report' }],
              ['json', { outputFile: 'test-results.json' }],
              ['github']
            ],
            use: {
              baseURL: 'https://localhost',
              ignoreHTTPSErrors: true,
              trace: 'on-first-retry',
              screenshot: 'only-on-failure',
              video: 'retain-on-failure'
            },
            projects: [
              { 
                name: 'setup', 
                testMatch: /.*\.setup\.js/,
                use: { ...devices['Desktop Chrome'] }
              },
              {
                name: 'chromium',
                use: { ...devices['Desktop Chrome'] },
                dependencies: ['setup']
              }
            ]
          });
          EOF

      - name: 🔧 Create .env.test for Docker
        run: |
          echo "📝 Creating .env.test from GitHub secrets..."
          
          cat > .env.test << EOF
          DB_URL=${{ secrets.DB_URL }}
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          NODE_ENV=test
          EOF

      - name: 🐳 Start Docker Compose test environment
        run: |
          echo "🚀 Starting test environment with staging config..."
          docker compose -f docker/test.yml up -d --build
          
          # Wait for backend to be healthy
          timeout 60 bash -c 'until curl -k -f https://localhost/api/health >/dev/null 2>&1; do sleep 2; done'
          
          echo "✅ Services are ready!"
          docker-compose -f docker/test.yml ps

      - name: 🏥 Health check
        run: |
          echo "🔍 Testing basic endpoints..."
          curl -k -f https://localhost/ || exit 1
          curl -k -f https://localhost/login || exit 1
          echo "✅ Basic endpoints working!"

      - name: 🎭 Run Playwright integration tests
        run: |
          npx playwright test --config=playwright.config.test.js
        env:
          CI: true

      - name: 📊 Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: 📋 Show test results
        if: always()
        run: |
          echo "🎭 Playwright Test Results:"
          if [ -f test-results.json ]; then
            cat test-results.json | jq '.stats'
          fi

      - name: 🗂️ Show Docker logs on failure
        if: failure()
        run: |
          echo "🐳 Docker Compose Logs:"
          docker compose -f docker/test.yml logs --tail=50

      - name: 🧹 Cleanup Docker environment
        if: always()
        run: |
          docker compose -f docker/test.yml down -v
          docker system prune -f

  # ========================================
  # TRIGGER EXISTING DEPLOYMENT
  # ========================================
  trigger-deploy:
    name: 🚀 Trigger Production Deployment
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Trigger deploy.yml workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('✅ All tests passed! Triggering production deployment...');
            
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main'
            });
            
            console.log('🎉 Production deployment triggered successfully!');
            console.log('Workflow dispatch result:', result.status);

