name: Test, Lint & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Optional: Run linting on a schedule to catch any lingering issues
    - cron: '36 5 * * 5'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 'lts/*'

jobs:
  # ========================================
  # JOB 1: LINTING (Code Quality Check)
  # ========================================
  eslint:
    name: 🔬 Lint Code
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔬 Run ESLint
        # This step is allowed to fail while you fix the initial 219 errors.
        # Once fixed, you should remove 'continue-on-error: true' to enforce code quality.
        run: |
          npx eslint . --config eslint.config.mjs --ext .js,.jsx,.ts,.tsx --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: 📊 Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  # ========================================
  # JOB 2: UNIT TESTS (Runs in parallel with linting)
  # ========================================
  jest-tests:
    name: 🧪 Run Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run Jest unit tests
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: 📊 Upload Jest Test Report
        uses: actions/upload-artifact@v4
        with:
          name: jest-test-report
          path: html-report/
          retention-days: 7

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          fail_ci_if_error: false

  # ========================================
  # JOB 3: INTEGRATION TESTS (Waits for linting and unit tests)
  # ========================================
  integration-tests:
    name: 🎭 Run Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # This is the quality gate: it will only run if both previous jobs succeed.
    needs: [jest-tests, eslint]
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 📝 Update Playwright config for localhost
        run: |
          cat > playwright.config.test.js << EOF
          import { defineConfig, devices } from '@playwright/test';
          export default defineConfig({
            testDir: './tests/integration',
            fullyParallel: false,
            forbidOnly: true,
            retries: 2,
            workers: 1,
            reporter: [['html', { outputDir: 'playwright-report' }], ['json', { outputFile: 'test-results.json' }], ['github']],
            use: {
              baseURL: 'https://localhost',
              ignoreHTTPSErrors: true,
              trace: 'on-first-retry',
              screenshot: 'only-on-failure',
              video: 'retain-on-failure'
            },
            projects: [
              { name: 'setup', testMatch: /.*\.setup\.js/, use: { ...devices['Desktop Chrome'] } },
              { name: 'chromium', use: { ...devices['Desktop Chrome'] }, dependencies: ['setup'] }
            ]
          });
          EOF

      - name: 🔧 Create .env.test for Docker
        run: |
          cat > .env.test << EOF
          DB_URL=${{ secrets.DB_URL }}
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_ACCESS_EXPIRES_IN=${{ secrets.JWT_ACCESS_EXPIRES_IN }}
          REDIS_DB=       ${{ secrets.REDIS_DB }}
          REDIS_HOST=     ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD= ${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT=     ${{ secrets.REDIS_PORT }}
          REDIS_USERNAME= ${{ secrets.REDIS_USERNAME }}
          JWT_REFRESH_EXPIRES_IN= ${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          NODE_ENV= test
          RECAPTCHA_SECRET_KEY= ${{ secrets.RECAPTCHA_SECRET_KEY }}
          EOF

      - name: 🐳 Start Docker Compose test environment
        run: |
          docker compose -f docker/test.yml up -d --build
          timeout 60 bash -c 'until curl -k -f https://localhost/api/health >/dev/null 2>&1; do sleep 2; done'
          docker compose -f docker/test.yml ps

      - name: 🏥 Health check
        run: |
          curl -k -f https://localhost/ || exit 1
          curl -k -f https://localhost/login || exit 1

      - name: 🎭 Run Playwright integration tests
        run: npx playwright test --config=playwright.config.test.js
        env:
          CI: true

      - name: 📊 Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: 📋 Show test results
        if: always()
        run: |
          if [ -f test-results.json ]; then
            cat test-results.json | jq '.stats'
          fi

      - name: 🗂️ Show Docker logs on failure
        if: failure()
        run: docker compose -f docker/test.yml logs --tail=50

      - name: 🧹 Cleanup Docker environment
        if: always()
        run: |
          docker compose -f docker/test.yml down -v
          docker system prune -f

  # ========================================
  # JOB 4: DEPLOYMENT (Waits for integration tests)
  # ========================================
  trigger-deploy:
    name: 🚀 Trigger Production Deployment
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🚀 Trigger deploy.yml workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main'
            });
            console.log('🎉 Production deployment triggered successfully!');
